# -*- coding: utf-8 -*-
"""VGG_net.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xIyNznK5ggkuIC6wyzvaDhDirV86iqtr
"""

import torch.nn as nn
import torch
import torch.nn.functional as F
from torchvision import models as models
from torch.autograd import Variable
class VGGFeature(nn.Module):
    def __init__(self, pretrained=True, layer=28):
        super().__init__()
        model = models.vgg16(pretrained).features.eval()
        self.net =  nn.Sequential(*list(model.children())[:-2])
        self.layer = layer

        self.layer1 = nn.Linear(512*384, 512)
        self.layer2 = nn.Linear(512,64)
        self.layer3 = nn.Linear(64,3)
        self.drop1=nn.Dropout(0.2)
    def forward(self, x):
      # for idx, layer in enumerate(self.net):
      #     x = layer(x)
      #     if idx == self.layer:
      #         break
      x=self.net(x)
      y_pred=x.view(-1,512*384)
      y_pred=F.relu(y_pred)
      y_pred=self.layer1(y_pred)
      y_pred=F.relu(y_pred)
      train_conv=y_pred
      y_pred=self.layer2(y_pred)
      # y_pred=self.drop1(y_pred)
      y_pred=F.relu(y_pred)
      y_pred=self.layer3(y_pred)
      return y_pred,train_conv